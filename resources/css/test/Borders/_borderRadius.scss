@import "../breakpointtest.scss";

// Border radius values
$border-radii: (
  none: 0px,
  sm: 0.125rem,
  default: 0.25rem,
  md: 0.375rem,
  lg: 0.5rem,
  xl: 0.75rem,
  2xl: 1rem,
  3xl: 1.5rem,
  full: 9999px
);

// Directions for border radius
$directions: (
  s: (border-start-start-radius, border-end-start-radius),
  e: (border-start-end-radius, border-end-end-radius),
  t: (border-top-left-radius, border-top-right-radius),
  r: (border-top-right-radius, border-bottom-right-radius),
  b: (border-bottom-right-radius, border-bottom-left-radius),
  l: (border-top-left-radius, border-bottom-left-radius)
);

// Corners for border radius
$corners: (
  ss: border-start-start-radius,
  se: border-start-end-radius,
  ee: border-end-end-radius,
  es: border-end-start-radius,
  tl: border-top-left-radius,
  tr: border-top-right-radius,
  br: border-bottom-right-radius,
  bl: border-bottom-left-radius
);

// border-radius
// Generate classes for each breakpoint
@each $key, $value in $border-radii {
    .rounded-#{$key}{
        border-radius: $value;
    }
}

.group:hover {
  @each $key, $value in $border-radii {
    .group-hover\:rounded-#{$key} {
      border-radius: $value !important;
    }
  }
}

@each $breakpoint in map-keys($breakpoints) {
  @include breakpoint($breakpoint) {
    @each $key, $value in $border-radii {
      .#{$breakpoint}\:rounded-#{$key} {
        border-radius: $value;
      }
    }
  }
}

@each $key, $value in $border-radii {
  .focus-within\:rounded-#{$key}:focus-within {
    border-radius: $value;
  }
}

@each $key, $value in $border-radii {
  .hover\:rounded-#{$key}:hover {
    border-radius: $value;
  }
}

@each $key, $value in $border-radii {
  .focus\:rounded-#{$key}:focus {
    border-radius: $value;
  }
}

@each $key, $value in $border-radii {
  .active\:rounded-#{$key}:active {
    border-radius: $value;
  }
}

// 복잡ㄱ좁ㄱㄷㅈ
// Mixin to generate border radius classes for each direction
@mixin generate-border-radius-classes($prefix, $radius) {
    @each $direction, $properties in $directions {
      .rounded-#{$direction}-#{$prefix} {
        @each $property in $properties {
          #{$property}: $radius;
        }
      }
    }
  }
  
  // Generate classes for each border radius value
  @each $key, $value in $border-radii {
    @include generate-border-radius-classes($key, $value);
  }
  
  // Additional hover, focus, and active states if needed
  .group:hover {
    @each $key, $value in $border-radii {
      @each $direction, $properties in $directions {
        .group-hover\:rounded-#{$direction}-#{$key} {
          @each $property in $properties {
            #{$property}: $value !important;
          }
        }
      }
    }
  }
  
  @each $breakpoint in map-keys($breakpoints) {
    @include breakpoint($breakpoint) {
      @each $key, $value in $border-radii {
        @each $direction, $properties in $directions {
          .#{$breakpoint}\:rounded-#{$direction}-#{$key} {
            @each $property in $properties {
              #{$property}: $value;
            }
          }
        }
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $direction, $properties in $directions {
      .focus-within\:rounded-#{$direction}-#{$key}:focus-within {
        @each $property in $properties {
          #{$property}: $value;
        }
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $direction, $properties in $directions {
      .hover\:rounded-#{$direction}-#{$key}:hover {
        @each $property in $properties {
          #{$property}: $value;
        }
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $direction, $properties in $directions {
      .focus\:rounded-#{$direction}-#{$key}:focus {
        @each $property in $properties {
          #{$property}: $value;
        }
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $direction, $properties in $directions {
      .active\:rounded-#{$direction}-#{$key}:active {
        @each $property in $properties {
          #{$property}: $value;
        }
      }
    }
  }


// border-start-
// border-end-
// Mixin to generate border radius classes for each corner
@mixin generate-border-radius-corner-classes($prefix, $radius) {
    @each $corner, $property in $corners {
      .rounded-#{$corner}-#{$prefix} {
        #{$property}: $radius;
      }
    }
  }
  
  // Generate classes for each border radius value
  @each $key, $value in $border-radii {
    @include generate-border-radius-corner-classes($key, $value);
  }
  
  // Additional hover, focus, and active states if needed
  .group:hover {
    @each $key, $value in $border-radii {
      @each $corner, $property in $corners {
        .group-hover\:rounded-#{$corner}-#{$key} {
          #{$property}: $value !important;
        }
      }
    }
  }
  
  @each $breakpoint in map-keys($breakpoints) {
    @include breakpoint($breakpoint) {
      @each $key, $value in $border-radii {
        @each $corner, $property in $corners {
          .#{$breakpoint}\:rounded-#{$corner}-#{$key} {
            #{$property}: $value;
          }
        }
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $corner, $property in $corners {
      .focus-within\:rounded-#{$corner}-#{$key}:focus-within {
        #{$property}: $value;
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $corner, $property in $corners {
      .hover\:rounded-#{$corner}-#{$key}:hover {
        #{$property}: $value;
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $corner, $property in $corners {
      .focus\:rounded-#{$corner}-#{$key}:focus {
        #{$property}: $value;
      }
    }
  }
  
  @each $key, $value in $border-radii {
    @each $corner, $property in $corners {
      .active\:rounded-#{$corner}-#{$key}:active {
        #{$property}: $value;
      }
    }
  }